# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16_4Bo0EIltEc8q0qjvRbP38TU23p3NvU
"""



"""## بسمه تعالی

دانشگاه آزاد اسلامی واحد علوم تحقیقات - دانشکده برق، مکانیک و کامپیوتر

نام مدرس : استاد مهدی اسلامی

عنوان درس : سیگنال ها و سیستم ها

نویسنده : محمد نیاز علیزاده  
فصل دهم  : نمونه برداری از سیگنال های پیوسته

سیگنال ها و سیستم ها کتاب اپنهایم

"""



"""# مقدمه‌ای بر نمونه‌برداری

نمونه‌برداری یکی از مهم‌ترین مراحل در پردازش سیگنال است که طی آن یک سیگنال پیوسته (آنالوگ) به یک دنباله گسسته از مقادیر تبدیل می‌شود. هدف اصلی این فرآیند، آماده‌سازی سیگنال برای پردازش دیجیتال است. از آنجایی که سیستم‌های دیجیتال فقط قادر به پردازش داده‌های گسسته هستند، نمونه‌برداری اولین گام در دیجیتالی کردن سیگنال‌ها به شمار می‌رود.

## تعریف نمونه‌برداری

در نمونه‌برداری، سیگنال پیوسته $x(t)$ در فواصل زمانی منظم $T_s$ (پریود نمونه‌برداری) نمونه‌برداری می‌شود و نتیجه یک دنباله گسسته $x[n]$ خواهد بود. این دنباله به صورت زیر تعریف می‌شود:

$$
x[n] = x(nT_s), \quad n \in \mathbb{Z}
$$

که در آن:

- $T_s$ فاصله زمانی بین دو نمونه متوالی (پریود نمونه‌برداری) است.
- $f_s = \frac{1}{T_s}$ فرکانس نمونه‌برداری است که به واحد هرتز (Hz) بیان می‌شود و نشان‌دهنده تعداد نمونه‌هایی است که در هر ثانیه گرفته می‌شود.

## هدف از نمونه‌برداری

هدف نمونه‌برداری این است که اطلاعات موجود در سیگنال پیوسته به‌طور کامل حفظ شود، به گونه‌ای که بتوان از دنباله گسسته نمونه‌ها، سیگنال اولیه را با دقت کامل بازسازی کرد. اگر فرکانس نمونه‌برداری به اندازه کافی بالا باشد، بازسازی دقیق سیگنال امکان‌پذیر است.

## نمونه‌برداری ایده‌آل از سیگنال‌های پیوسته

نمونه‌برداری ایده‌آل به حالتی گفته می‌شود که سیگنال پیوسته $x(t)$ دقیقاً در فواصل زمانی $T_s$ توسط ضرب آن با قطار پالس‌های ضربه‌ای دیراک $\delta(t)$ نمونه‌برداری شود. قطار پالس ضربه‌ای به صورت زیر تعریف می‌شود:

$$
\delta_s(t) = \sum_{n=-\infty}^{\infty} \delta(t - nT_s)
$$

در نتیجه، سیگنال نمونه‌برداری‌شده $x_s(t)$ به صورت زیر خواهد بود:

$$
x_s(t) = x(t) \cdot \delta_s(t) = \sum_{n=-\infty}^{\infty} x(nT_s) \delta(t - nT_s)
$$

این مدل نشان می‌دهد که سیگنال نمونه‌برداری‌شده فقط در زمان‌های گسسته $t = nT_s$ مقادیر غیر صفر دارد و در سایر زمان‌ها صفر است.

### طیف سیگنال نمونه‌برداری‌شده

طیف سیگنال نمونه‌برداری‌شده $X_s(f)$ از طریق تبدیل فوریه به دست می‌آید. اگر سیگنال پیوسته $x(t)$ تبدیل فوریه $X(f)$ داشته باشد، طیف سیگنال نمونه‌برداری‌شده به صورت زیر خواهد بود:

$$
X_s(f) = \frac{1}{T_s} \sum_{k=-\infty}^{\infty} X\left(f - k f_s\right)
$$

که در آن $f_s = \frac{1}{T_s}$ فرکانس نمونه‌برداری است. همان‌طور که مشاهده می‌شود، طیف سیگنال نمونه‌برداری‌شده شامل کپی‌هایی از طیف سیگنال اصلی است که در فواصل مضرب‌های صحیح $f_s$ تکرار می‌شوند.

### شرط بازسازی بدون اعوجاج

برای اینکه بتوان سیگنال اولیه را بدون اعوجاج از سیگنال نمونه‌برداری‌شده بازسازی کرد، لازم است که کپی‌های طیف اصلی با یکدیگر تداخل نداشته باشند. این شرط زمانی برقرار است که:

$$
f_s \geq 2 f_{\text{max}}
$$

که در آن $f_{\text{max}}$ بیشینه فرکانس سیگنال پیوسته $x(t)$ است. این مقدار به عنوان **فرکانس نایکوییست** شناخته می‌شود. اگر این شرط برقرار نباشد، پدیده‌ای به نام **Aliasing** رخ می‌دهد که باعث هم‌پوشانی کپی‌های طیف و در نتیجه از بین رفتن اطلاعات سیگنال می‌شود.

### بازسازی سیگنال از نمونه‌ها

برای بازسازی سیگنال پیوسته از دنباله گسسته نمونه‌ها، از یک **فیلتر پایین‌گذر ایده‌آل** با عرض باند $f_{\text{max}}$ استفاده می‌شود. سیگنال بازسازی‌شده به صورت زیر خواهد بود:

$$
x(t) = \sum_{n=-\infty}^{\infty} x[n] \text{sinc}\left(\frac{t - nT_s}{T_s}\right)
$$

که در آن:

- $\text{sinc}(x) = \frac{\sin(\pi x)}{\pi x}$ تابع sinc است.
- $T_s$ پریود نمونه‌برداری است.

"""

import numpy as np
import matplotlib.pyplot as plt

# تعریف سیگنال پیوسته
def continuous_signal(t):
    return np.sin(2 * np.pi * 5 * t)  # سیگنال سینوسی با فرکانس 5 هرتز

# پارامترهای نمونه‌برداری
fs = 20  # فرکانس نمونه‌برداری (باید بزرگ‌تر از 2*f_max باشد)
Ts = 1 / fs  # پریود نمونه‌برداری
t_continuous = np.linspace(0, 1, 1000)  # زمان پیوسته برای نمایش سیگنال
t_samples = np.arange(0, 1, Ts)  # زمان نمونه‌ها
x_samples = continuous_signal(t_samples)  # نمونه‌های سیگنال

# رسم سیگنال پیوسته و نمونه‌های آن
plt.figure(figsize=(10, 5))
plt.plot(t_continuous, continuous_signal(t_continuous), label='Continuous Signal')
plt.stem(t_samples, x_samples, basefmt=" ", linefmt='r-', markerfmt='ro', label='Samples')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Signal Sampling')
plt.legend()
plt.grid(True)
plt.show()

"""قضیه نمونه‌برداری (Sampling Theorem)
قضیه نمونه‌برداری که به قضیه نایکوئیست-شنون نیز معروف است، بیان می‌کند که اگر یک سیگنال پیوسته در زمان دارای باند محدود باشد (یعنی حداکثر فرکانس آن محدود باشد)، می‌توان آن را به طور کامل و بدون از دست دادن اطلاعات از روی نمونه‌های گسسته بازسازی کرد، به شرط آنکه فرکانس نمونه‌برداری حداقل دو برابر بزرگ‌ترین فرکانس موجود در سیگنال باشد.

تعریف دقیق قضیه:
اگر
𝑓
(
𝑡
)
f(t) یک سیگنال پیوسته با حداکثر فرکانس
𝑓
𝑚
𝑎
𝑥
f
max
​
  باشد، سیگنال
𝑓
(
𝑡
)
f(t) به صورت کامل قابل بازسازی است، مشروط بر اینکه سیگنال با فرکانس نمونه‌برداری
𝑓
𝑠
f
s
​
  که بزرگ‌تر یا مساوی
2
𝑓
𝑚
𝑎
𝑥
2f
max
​
  است، نمونه‌برداری شود:

𝑓
𝑠
≥
2
𝑓
𝑚
𝑎
𝑥
f
s
​
 ≥2f
max
​

این شرط به عنوان نرخ نایکوئیست شناخته می‌شود و حداقل فرکانس نمونه‌برداری لازم برای بازسازی سیگنال است.

بازسازی سیگنال:
زمانی که شرط فوق برقرار باشد، می‌توان سیگنال پیوسته را از نمونه‌های گسسته بازسازی کرد. بازسازی سیگنال معمولاً با استفاده از یک فیلتر پایین‌گذر ایده‌آل انجام می‌شود که فرکانس‌های بالاتر از
𝑓
𝑚
𝑎
𝑥
f
max
​
  را حذف می‌کند.

مفهوم Aliasing (پدیده تداخل فرکانسی):
اگر فرکانس نمونه‌برداری کمتر از
2
𝑓
𝑚
𝑎
𝑥
2f
max
​
  باشد، سیگنال به درستی نمونه‌برداری نمی‌شود و پدیده‌ای به نام Aliasing رخ می‌دهد. در این حالت، فرکانس‌های بالاتر از نصف فرکانس نمونه‌برداری به صورت اشتباه به فرکانس‌های پایین‌تر تبدیل می‌شوند و بازسازی دقیق سیگنال غیرممکن می‌گردد.

پدیده Aliasing در شکل زیر نشان داده شده است:

اگر
𝑓
𝑠
<
2
𝑓
𝑚
𝑎
𝑥
f
s
​
 <2f
max
​
 ، فرکانس‌های بالاتر به محدوده فرکانس‌های پایین‌تر منتقل شده و سیگنال تحریف می‌شود.
اگر
𝑓
𝑠
≥
2
𝑓
𝑚
𝑎
𝑥
f
s
​
 ≥2f
max
​
 ، سیگنال بدون خطا نمونه‌برداری و بازسازی می‌شود.
مزایای قضیه نمونه‌برداری:
کاهش حجم داده‌ها: با نمونه‌برداری از سیگنال پیوسته، می‌توان داده‌ها را به صورت گسسته و دیجیتال ذخیره کرد که منجر به کاهش حجم داده‌ها می‌شود.
پردازش دیجیتال سیگنال: نمونه‌برداری امکان پردازش سیگنال به وسیله سیستم‌های دیجیتال را فراهم می‌کند.
مثال عملی:
فرض کنید سیگنالی با حداکثر فرکانس
𝑓
𝑚
𝑎
𝑥
=
5
f
max
​
 =5 هرتز داریم. طبق قضیه نایکوئیست، برای نمونه‌برداری صحیح از این سیگنال، فرکانس نمونه‌برداری باید حداقل
𝑓
𝑠
=
10
f
s
​
 =10 هرتز باشد. اگر با فرکانس
𝑓
𝑠
=
8
f
s
​
 =8 هرتز نمونه‌برداری کنیم، به دلیل عدم رعایت شرط نایکوئیست، پدیده Aliasing رخ می‌دهد و سیگنال به درستی بازسازی نمی‌شود.
"""

import numpy as np
import matplotlib.pyplot as plt

# تعریف سیگنال پیوسته
def continuous_signal(t):
    return np.sin(2 * np.pi * 5 * t)  # سیگنال سینوسی با فرکانس 5 هرتز

# پارامترهای نمونه‌برداری
fs1 = 10  # فرکانس نمونه‌برداری مطابق نرخ نایکوئیست (بدون Aliasing)
fs2 = 8   # فرکانس نمونه‌برداری کمتر از نرخ نایکوئیست (با Aliasing)
t_continuous = np.linspace(0, 1, 1000)  # زمان پیوسته برای نمایش سیگنال

# نمونه‌برداری
t_samples1 = np.arange(0, 1, 1/fs1)
x_samples1 = continuous_signal(t_samples1)

t_samples2 = np.arange(0, 1, 1/fs2)
x_samples2 = continuous_signal(t_samples2)

# رسم سیگنال پیوسته و نمونه‌های آن
plt.figure(figsize=(15, 6))

# نمودار برای fs1 (بدون Aliasing)
plt.subplot(1, 2, 1)
plt.plot(t_continuous, continuous_signal(t_continuous), label='Continuous Signal')
plt.stem(t_samples1, x_samples1, basefmt=" ", linefmt='r-', markerfmt='ro', label='Samples (fs = 10 Hz)')
plt.title('Sampling without Aliasing (fs = 10 Hz)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)

# نمودار برای fs2 (با Aliasing)
plt.subplot(1, 2, 2)
plt.plot(t_continuous, continuous_signal(t_continuous), label='Continuous Signal')
plt.stem(t_samples2, x_samples2, basefmt=" ", linefmt='g-', markerfmt='go', label='Samples (fs = 8 Hz)')
plt.title('Sampling with Aliasing (fs = 8 Hz)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

"""نمونه‌برداری ایده‌آل از سیگنال‌های پیوسته
تعریف نمونه‌برداری ایده‌آل:
نمونه‌برداری ایده‌آل فرآیندی است که طی آن یک سیگنال پیوسته در زمان،
𝑥
(
𝑡
)
x(t)، به یک دنباله از مقادیر گسسته تبدیل می‌شود. این دنباله با فاصله‌های زمانی منظم
𝑇
𝑠
T
s
​
  از سیگنال اصلی گرفته می‌شود. به بیان دیگر، نمونه‌برداری ایده‌آل شامل اندازه‌گیری مقدار سیگنال در لحظات گسسته
𝑡
=
𝑛
𝑇
𝑠
t=nT
s
​
  است، که
𝑇
𝑠
T
s
​
  فاصله زمانی بین نمونه‌ها و
𝑛
n یک عدد صحیح است.

فرمول نمونه‌برداری ایده‌آل:

𝑥
[
𝑛
]
=
𝑥
(
𝑛
𝑇
𝑠
)
,
𝑛
∈
𝑍
x[n]=x(nT
s
​
 ),n∈Z
در این رابطه:

𝑥
[
𝑛
]
x[n] نمونه‌های سیگنال گسسته است.
𝑇
𝑠
T
s
​
  دوره نمونه‌برداری است.
𝑓
𝑠
=
1
𝑇
𝑠
f
s
​
 =
T
s
​

1
​
  فرکانس نمونه‌برداری است.
بازسازی سیگنال از نمونه‌ها:
در شرایطی که فرکانس نمونه‌برداری (
𝑓
𝑠
f
s
​
 ) از دو برابر بزرگ‌ترین فرکانس سیگنال (
2
𝑓
𝑚
𝑎
𝑥
2f
max
​
 ) بیشتر باشد، سیگنال پیوسته
𝑥
(
𝑡
)
x(t) به طور کامل از روی نمونه‌های گسسته
𝑥
[
𝑛
]
x[n] قابل بازسازی است. این بازسازی از طریق یک فیلتر پایین‌گذر ایده‌آل با قطع فرکانس
𝑓
𝑚
𝑎
𝑥
f
max
​
  انجام می‌شود.

نمایش ریاضی نمونه‌برداری ایده‌آل:
فرآیند نمونه‌برداری ایده‌آل به صورت ضرب سیگنال پیوسته
𝑥
(
𝑡
)
x(t) در یک قطار ضربه‌های دیراک
𝛿
(
𝑡
)
δ(t) با فاصله
𝑇
𝑠
T
s
​
  انجام می‌شود:

𝑥
𝑠
(
𝑡
)
=
𝑥
(
𝑡
)
⋅
∑
𝑛
=
−
∞
∞
𝛿
(
𝑡
−
𝑛
𝑇
𝑠
)
x
s
​
 (t)=x(t)⋅
n=−∞
∑
∞
​
 δ(t−nT
s
​
 )
در این رابطه:

𝛿
(
𝑡
−
𝑛
𝑇
𝑠
)
δ(t−nT
s
​
 ) ضربه دیراک در لحظه
𝑡
=
𝑛
𝑇
𝑠
t=nT
s
​
  است.
حاصل این ضرب یک سیگنال گسسته شامل نمونه‌های
𝑥
(
𝑡
)
x(t) در لحظات
𝑛
𝑇
𝑠
nT
s
​
  است.
شرایط برای نمونه‌برداری ایده‌آل:
برای بازسازی بدون خطای سیگنال پیوسته از روی نمونه‌های آن، باید شرط زیر برقرار باشد:

𝑓
𝑠
≥
2
𝑓
𝑚
𝑎
𝑥
f
s
​
 ≥2f
max
​

که در آن:

𝑓
𝑠
f
s
​
  فرکانس نمونه‌برداری است.
𝑓
𝑚
𝑎
𝑥
f
max
​
  حداکثر فرکانس موجود در سیگنال پیوسته است.
این شرط تضمین می‌کند که سیگنال پیوسته به درستی نمونه‌برداری شده و هیچ اطلاعاتی از دست نمی‌رود.

پدیده Aliasing:
اگر
𝑓
𝑠
<
2
𝑓
𝑚
𝑎
𝑥
f
s
​
 <2f
max
​
  باشد، شرط نایکوئیست برقرار نیست و سیگنال نمی‌تواند به درستی بازسازی شود. در این حالت، فرکانس‌های بالا به صورت اشتباه به فرکانس‌های پایین‌تر تبدیل می‌شوند که به آن Aliasing یا تداخل فرکانسی گفته می‌شود.
"""

import numpy as np
import matplotlib.pyplot as plt

# تعریف سیگنال پیوسته
def continuous_signal(t):
    return np.sin(2 * np.pi * 3 * t) + 0.5 * np.sin(2 * np.pi * 8 * t)  # ترکیب دو سیگنال سینوسی با فرکانس‌های 3 و 8 هرتز

# پارامترهای نمونه‌برداری
fs = 20  # فرکانس نمونه‌برداری (بزرگ‌تر از 2*f_max)
Ts = 1 / fs  # دوره نمونه‌برداری
t_continuous = np.linspace(0, 1, 1000)  # زمان پیوسته برای نمایش سیگنال
t_samples = np.arange(0, 1, Ts)  # زمان نمونه‌ها
x_samples = continuous_signal(t_samples)  # نمونه‌های سیگنال

# رسم سیگنال پیوسته و نمونه‌های آن
plt.figure(figsize=(10, 5))
plt.plot(t_continuous, continuous_signal(t_continuous), label='Continuous Signal')
plt.stem(t_samples, x_samples, basefmt=" ", linefmt='r-', markerfmt='ro', label='Samples')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Ideal Sampling of a Continuous Signal')
plt.legend()
plt.grid(True)
plt.show()

"""بازسازی سیگنال پیوسته از سیگنال نمونه‌برداری شده
تعریف بازسازی سیگنال:
بازسازی سیگنال به فرآیندی گفته می‌شود که طی آن، سیگنال پیوسته اولیه
𝑥
(
𝑡
)
x(t) از روی نمونه‌های گسسته آن
𝑥
[
𝑛
]
x[n] بازسازی می‌شود. اگر شرط نرخ نایکوئیست (
𝑓
𝑠
≥
2
𝑓
𝑚
𝑎
𝑥
f
s
​
 ≥2f
max
​
 ) در فرآیند نمونه‌برداری رعایت شده باشد، سیگنال پیوسته می‌تواند بدون خطا از روی نمونه‌های گسسته بازسازی شود.

روش بازسازی:
برای بازسازی سیگنال پیوسته از نمونه‌های گسسته، از یک فیلتر پایین‌گذر ایده‌آل استفاده می‌شود که تمام فرکانس‌های بالاتر از
𝑓
𝑚
𝑎
𝑥
f
max
​
  را حذف کرده و سیگنال اصلی را بازسازی می‌کند.

فرمول بازسازی:
سیگنال بازسازی‌شده
𝑥
𝑟
(
𝑡
)
x
r
​
 (t) به صورت زیر بیان می‌شود:

𝑥
𝑟
(
𝑡
)
=
∑
𝑛
=
−
∞
∞
𝑥
[
𝑛
]
sinc
(
𝑡
−
𝑛
𝑇
𝑠
𝑇
𝑠
)
x
r
​
 (t)=
n=−∞
∑
∞
​
 x[n]sinc(
T
s
​

t−nT
s
​

​
 )
در این فرمول:

𝑥
[
𝑛
]
x[n] نمونه‌های گسسته سیگنال هستند.
𝑇
𝑠
T
s
​
  دوره نمونه‌برداری است.
sinc
(
𝑡
)
=
sin
⁡
(
𝜋
𝑡
)
𝜋
𝑡
sinc(t)=
πt
sin(πt)
​
  تابع sinc است که در بازسازی سیگنال به کار می‌رود.
مفهوم بازسازی با تابع Sinc:
تابع Sinc به عنوان یک «پالس بازسازی» عمل می‌کند که در اطراف هر نمونه قرار می‌گیرد و با ترکیب این پالس‌ها، سیگنال پیوسته بازسازی می‌شود. به دلیل خاصیت‌های ریاضی تابع Sinc، اگر شرط نایکوئیست برقرار باشد، سیگنال بازسازی‌شده دقیقاً با سیگنال اصلی برابر خواهد بود.

مراحل بازسازی سیگنال:
نمونه‌برداری سیگنال پیوسته: سیگنال پیوسته
𝑥
(
𝑡
)
x(t) با فاصله‌های منظم
𝑇
𝑠
T
s
​
  نمونه‌برداری شده و به دنباله
𝑥
[
𝑛
]
x[n] تبدیل می‌شود.
بازسازی با تابع Sinc: برای هر نمونه
𝑥
[
𝑛
]
x[n]، یک تابع Sinc در محل
𝑡
=
𝑛
𝑇
𝑠
t=nT
s
​
  قرار داده می‌شود.
جمع زدن پالس‌های Sinc: با جمع جبری تمام پالس‌های Sinc، سیگنال بازسازی‌شده
𝑥
𝑟
(
𝑡
)
x
r
​
 (t) به دست می‌آید.
"""

import numpy as np
import matplotlib.pyplot as plt

# تعریف سیگنال پیوسته
def continuous_signal(t):
    return np.sin(2 * np.pi * 3 * t) + 0.5 * np.sin(2 * np.pi * 8 * t)  # ترکیب دو موج سینوسی با فرکانس‌های 3 و 8 هرتز

# پارامترهای نمونه‌برداری
fs = 20  # فرکانس نمونه‌برداری (باید بزرگ‌تر از 2*f_max باشد)
Ts = 1 / fs  # دوره نمونه‌برداری
t_continuous = np.linspace(0, 1, 1000)  # زمان پیوسته برای نمایش سیگنال
t_samples = np.arange(0, 1, Ts)  # زمان نمونه‌ها
x_samples = continuous_signal(t_samples)  # نمونه‌های سیگنال

# تابع بازسازی با استفاده از sinc
def reconstruct_signal(t, t_samples, x_samples, Ts):
    reconstructed = np.zeros_like(t)
    for n, x_n in enumerate(x_samples):
        reconstructed += x_n * np.sinc((t - t_samples[n]) / Ts)
    return reconstructed

# بازسازی سیگنال
t_reconstructed = np.linspace(0, 1, 1000)  # زمان برای سیگنال بازسازی‌شده
x_reconstructed = reconstruct_signal(t_reconstructed, t_samples, x_samples, Ts)

# رسم سیگنال پیوسته، نمونه‌ها و سیگنال بازسازی‌شده
plt.figure(figsize=(12, 6))

# سیگنال پیوسته اصلی
plt.plot(t_continuous, continuous_signal(t_continuous), 'b', label='Original Continuous Signal', alpha=0.7)

# نمونه‌های سیگنال
plt.stem(t_samples, x_samples, basefmt=" ", linefmt='r-', markerfmt='ro', label='Samples')

# سیگنال بازسازی‌شده
plt.plot(t_reconstructed, x_reconstructed, 'g--', label='Reconstructed Signal')

plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Reconstruction of a Continuous Signal from Samples')
plt.legend()
plt.grid(True)
plt.show()

"""اثرات زیر نمونه‌برداری و پدیده Aliasing
تعریف زیر نمونه‌برداری (Undersampling):
زیر نمونه‌برداری زمانی اتفاق می‌افتد که فرکانس نمونه‌برداری
𝑓
𝑠
f
s
​
  کمتر از دو برابر بزرگ‌ترین فرکانس موجود در سیگنال
2
𝑓
𝑚
𝑎
𝑥
2f
max
​
  باشد. در چنین شرایطی، شرط نایکوئیست برقرار نیست و اطلاعات سیگنال به درستی حفظ نمی‌شود.

پدیده Aliasing:
Aliasing یا تداخل فرکانسی پدیده‌ای است که طی آن فرکانس‌های بالای سیگنال، به صورت اشتباه به فرکانس‌های پایین‌تر تبدیل می‌شوند و در نتیجه سیگنال بازسازی‌شده متفاوت از سیگنال اصلی خواهد بود. این پدیده به دلیل زیر نمونه‌برداری رخ می‌دهد.

توضیح ریاضی پدیده Aliasing:
اگر سیگنال پیوسته
𝑥
(
𝑡
)
x(t) شامل فرکانس
𝑓
f باشد و فرکانس نمونه‌برداری
𝑓
𝑠
f
s
​
  کمتر از
2
𝑓
2f باشد، فرکانس مشاهده‌شده در سیگنال گسسته به صورت زیر محاسبه می‌شود:

𝑓
𝑎
𝑙
𝑖
𝑎
𝑠
=
∣
𝑓
−
𝑘
𝑓
𝑠
∣
که در آن
𝑘
∈
𝑍
f
alias
​
 =∣f−kf
s
​
 ∣که در آن k∈Z
در این رابطه، فرکانس
𝑓
𝑎
𝑙
𝑖
𝑎
𝑠
f
alias
​
  فرکانسی است که در سیگنال بازسازی‌شده مشاهده می‌شود و با فرکانس اصلی
𝑓
f یکسان نیست.

تأثیرات Aliasing:
تغییر در فرکانس سیگنال بازسازی‌شده: فرکانس‌های بالا به اشتباه به فرکانس‌های پایین تبدیل می‌شوند.
از دست رفتن اطلاعات سیگنال اصلی: به دلیل هم‌پوشانی طیفی، اطلاعات سیگنال اصلی از بین می‌رود.
تولید اعوجاج در سیگنال بازسازی‌شده: به دلیل تغییر فرکانس‌ها، سیگنال بازسازی‌شده به شکل اعوجاج‌یافته ظاهر می‌شود.
جلوگیری از Aliasing:
برای جلوگیری از پدیده Aliasing، باید شرط نایکوئیست رعایت شود:

𝑓
𝑠
≥
2
𝑓
𝑚
𝑎
𝑥
f
s
​
 ≥2f
max
​

در عمل، معمولاً از فیلتر پایین‌گذر آنالوگ قبل از نمونه‌برداری استفاده می‌شود تا فرکانس‌های بالاتر از
𝑓
𝑚
𝑎
𝑥
f
max
​
  حذف شوند و نمونه‌برداری به درستی انجام شود.


"""

import numpy as np
import matplotlib.pyplot as plt

# تعریف سیگنال پیوسته
def continuous_signal(t, freq=10):
    return np.sin(2 * np.pi * freq * t)  # سیگنال سینوسی با فرکانس مشخص

# پارامترهای نمونه‌برداری
f_signal = 10  # فرکانس سیگنال اصلی (هرتز)
fs_high = 25    # فرکانس نمونه‌برداری بالا (رعایت شرط نایکوئیست)
fs_low = 12     # فرکانس نمونه‌برداری پایین (زیر نمونه‌برداری)

# زمان برای نمایش سیگنال پیوسته
t_continuous = np.linspace(0, 1, 1000)

# زمان و نمونه‌ها برای فرکانس نمونه‌برداری بالا
t_samples_high = np.arange(0, 1, 1/fs_high)
x_samples_high = continuous_signal(t_samples_high, f_signal)

# زمان و نمونه‌ها برای فرکانس نمونه‌برداری پایین
t_samples_low = np.arange(0, 1, 1/fs_low)
x_samples_low = continuous_signal(t_samples_low, f_signal)

# رسم سیگنال پیوسته و نمونه‌ها برای فرکانس نمونه‌برداری بالا
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(t_continuous, continuous_signal(t_continuous, f_signal), label='Original Continuous Signal')
plt.stem(t_samples_high, x_samples_high, basefmt=" ", linefmt='r-', markerfmt='ro', label='Samples (fs = 25 Hz)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Proper Sampling (fs > 2 * f_max)')
plt.legend()
plt.grid(True)

# رسم سیگنال پیوسته و نمونه‌ها برای فرکانس نمونه‌برداری پایین
plt.subplot(2, 1, 2)
plt.plot(t_continuous, continuous_signal(t_continuous, f_signal), label='Original Continuous Signal')
plt.stem(t_samples_low, x_samples_low, basefmt=" ", linefmt='g-', markerfmt='go', label='Samples (fs = 12 Hz)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Aliasing due to Undersampling (fs < 2 * f_max)')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

"""سیستم‌های نمونه‌برداری‌شده در زمان (Time-Shifted Sampling Systems)
تعریف:
در سیستم‌های نمونه‌برداری‌شده در زمان، به جای نمونه‌برداری سیگنال در زمان‌های کاملاً منظم با فاصله ثابت
𝑇
𝑠
T
s
​
 ، نمونه‌برداری با یک تأخیر زمانی ثابت یا یک شیفت زمانی انجام می‌شود. این شیفت زمانی می‌تواند به دلایل مختلفی از جمله طراحی سیستم یا تأخیر در سنسورها رخ دهد.

نمونه‌برداری در این سیستم‌ها به صورت زیر تعریف می‌شود:

𝑥
[
𝑛
]
=
𝑥
(
𝑛
𝑇
𝑠
+
𝜏
)
x[n]=x(nT
s
​
 +τ)
که در آن:

𝑇
𝑠
T
s
​
  دوره نمونه‌برداری است.
𝜏
τ شیفت زمانی یا تأخیر در زمان نمونه‌برداری است.
اثرات شیفت زمانی:
تغییر در فاز سیگنال:
شیفت زمانی در نمونه‌برداری باعث تغییر در فاز سیگنال بازسازی‌شده می‌شود. اگر سیگنال اصلی یک موج سینوسی باشد، شیفت زمانی منجر به جابه‌جایی فاز در دامنه فرکانسی خواهد شد.

تغییر در موقعیت زمانی نمونه‌ها:
به دلیل وجود شیفت زمانی، نمونه‌های گسسته به‌جای موقعیت‌های معمول
𝑛
𝑇
𝑠
nT
s
​
  در زمان‌های
𝑛
𝑇
𝑠
+
𝜏
nT
s
​
 +τ قرار می‌گیرند.

بازسازی سیگنال با جابه‌جایی فاز:
در هنگام بازسازی سیگنال از روی نمونه‌های دارای شیفت زمانی، سیگنال بازسازی‌شده دقیقاً مشابه سیگنال اصلی نخواهد بود، بلکه به‌اندازه
𝜏
τ جابه‌جایی فاز خواهد داشت.
"""

import numpy as np
import matplotlib.pyplot as plt

# تعریف سیگنال پیوسته
def continuous_signal(t, freq=5):
    return np.sin(2 * np.pi * freq * t)  # سیگنال سینوسی با فرکانس 5 هرتز

# پارامترهای نمونه‌برداری
fs = 20  # فرکانس نمونه‌برداری (هرتز)
Ts = 1 / fs  # دوره نمونه‌برداری
tau = 0.01  # شیفت زمانی (ثانیه)

# زمان برای نمایش سیگنال پیوسته
t_continuous = np.linspace(0, 1, 1000)

# زمان و نمونه‌ها بدون شیفت زمانی
t_samples_no_shift = np.arange(0, 1, Ts)
x_samples_no_shift = continuous_signal(t_samples_no_shift)

# زمان و نمونه‌ها با شیفت زمانی
t_samples_shifted = np.arange(0, 1, Ts) + tau
x_samples_shifted = continuous_signal(t_samples_shifted)

# رسم سیگنال پیوسته و نمونه‌های بدون شیفت زمانی
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(t_continuous, continuous_signal(t_continuous), label='Original Continuous Signal')
plt.stem(t_samples_no_shift, x_samples_no_shift, basefmt=" ", linefmt='r-', markerfmt='ro', label='Samples (No Shift)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Sampling without Time Shift')
plt.legend()
plt.grid(True)

# رسم سیگنال پیوسته و نمونه‌های با شیفت زمانی
plt.subplot(2, 1, 2)
plt.plot(t_continuous, continuous_signal(t_continuous), label='Original Continuous Signal')
plt.stem(t_samples_shifted, x_samples_shifted, basefmt=" ", linefmt='g-', markerfmt='go', label='Samples (With Time Shift)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Sampling with Time Shift (τ = 0.01 s)')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()



"""# نمونه‌برداری از سیگنال‌های چندکاناله

## مقدمه

در پردازش سیگنال‌های چندکاناله، سیگنال‌ها به طور همزمان از چندین منبع یا حسگر دریافت می‌شوند. این سیگنال‌ها ممکن است از کانال‌های مختلف در یک سیستم ضبط داده (مانند میکروفن‌ها یا دوربین‌های چندگانه) یا از منابع مختلف مانند چندین حسگر اندازه‌گیری باشند. نمونه‌برداری از این سیگنال‌ها به معنای تبدیل سیگنال‌های آنالوگ به سیگنال‌های دیجیتال در زمان‌های گسسته است.

### سیستم‌های چندکاناله

یک سیستم چندکاناله معمولاً سیگنال‌هایی را از چندین ورودی دریافت می‌کند. این ورودی‌ها می‌توانند به طور همزمان نمونه‌برداری شده و سپس به سیگنال‌های دیجیتال تبدیل شوند. هر کانال به صورت مستقل ممکن است سیگنال آنالوگ خود را داشته باشد و تبدیل آن به دیجیتال نیازمند یک **نمونه‌بردار** برای هر کانال است.

### مراحل نمونه‌برداری از سیگنال‌های چندکاناله

1. **جمع‌آوری سیگنال‌های آنالوگ**:
   - سیگنال‌های آنالوگ از چندین منبع مختلف دریافت می‌شوند.
   - این سیگنال‌ها ممکن است به صورت پیوسته در زمان وجود داشته باشند.

2. **نمونه‌برداری (Sampling)**:
   - برای هر کانال، سیگنال آنالوگ در فواصل زمانی مشخص (با فرکانس نمونه‌برداری $f_s$) نمونه‌برداری می‌شود.
   - سیگنال‌های نمونه‌برداری شده به یک دنباله از مقادیر دیجیتال تبدیل می‌شوند. این کار معمولاً توسط **مبدل آنالوگ به دیجیتال (ADC)** انجام می‌شود.
   
3. **کنترل زمان‌بندی نمونه‌برداری**:
   - برای جلوگیری از مشکلاتی مانند تداخل یا اختلال بین کانال‌ها، زمان‌بندی نمونه‌برداری برای تمام کانال‌ها باید به صورت همزمان یا هماهنگ انجام شود.
   - این مسئله به ویژه در سیستم‌های زمان حساس مانند پردازش سیگنال‌های صوتی و تصویری مهم است.

4. **کمی‌سازی (Quantization)**:
   - بعد از نمونه‌برداری، هر نمونه باید به یک مقدار عددی دیجیتال کمی‌سازی شود. این مقدار بسته به دقت مبدل آنالوگ به دیجیتال (ADC) ممکن است محدود به تعداد مشخصی از بیت‌ها باشد.
   
5. **ادغام داده‌های چندکاناله**:
   - پس از نمونه‌برداری و کمی‌سازی، داده‌های هر کانال به صورت مستقل به یک فرمت دیجیتال تبدیل می‌شوند. گاهی اوقات این داده‌ها باید به یکدیگر ادغام شوند تا پردازش‌های بیشتر یا تجزیه‌وتحلیل مشترک روی داده‌های چندکاناله انجام گیرد.

## چالش‌ها و ملاحظات

- **هماهنگی زمانی**: یکی از چالش‌های مهم در نمونه‌برداری از سیگنال‌های چندکاناله، هماهنگ‌سازی زمان‌بندی نمونه‌برداری بین کانال‌ها است. این مسئله به ویژه در سیستم‌های با حساسیت زمانی بالا بسیار حائز اهمیت است.
  
- **پهنای باند و ظرفیت داده**: نمونه‌برداری از چندین کانال به طور همزمان ممکن است نیاز به پهنای باند بالایی داشته باشد. باید از فناوری‌هایی استفاده شود که توانایی انتقال حجم زیاد داده‌های دیجیتال را داشته باشند.

- **پردازش موازی**: در پردازش سیگنال‌های چندکاناله، معمولاً از پردازش موازی استفاده می‌شود تا سیگنال‌ها به صورت همزمان تحلیل شوند.

## کاربردها

- **پردازش صوتی چندکاناله**: در ضبط و پردازش صداهای محیطی از چندین میکروفن به طور همزمان استفاده می‌شود.
- **پردازش تصویری و ویدیویی چندکاناله**: در دوربین‌های ویدیویی چندگانه یا حسگرهای تصویری، نمونه‌برداری از داده‌های تصویری از چندین کانال انجام می‌شود.
- **سیستم‌های نظارتی**: در سیستم‌های نظارتی از حسگرهای متعدد برای شبیه‌سازی محیط‌های مختلف و جمع‌آوری داده‌ها به صورت چندکاناله استفاده می‌شود.

## نتیجه‌گیری

نمونه‌برداری از سیگنال‌های چندکاناله یکی از مفاهیم اساسی در پردازش سیگنال است که نیاز به دقت بالا در همگام‌سازی و پردازش دارد. این تکنیک به طور گسترده‌ای در کاربردهایی مانند پردازش صوتی، تصویری، و سیگنال‌های سنجش از راه دور استفاده می‌شود.

"""

import numpy as np
import matplotlib.pyplot as plt

# پارامترها
fs = 1000  # فرکانس نمونه‌برداری (Hz)
t = np.linspace(0, 1, fs)  # زمان نمونه‌برداری
f1 = 50  # فرکانس سیگنال اول (Hz)
f2 = 120  # فرکانس سیگنال دوم (Hz)

# سیگنال‌های آنالوگ
signal1 = np.sin(2 * np.pi * f1 * t)
signal2 = np.sin(2 * np.pi * f2 * t)

# افزودن نویز به سیگنال‌ها
noise = np.random.normal(0, 0.1, t.shape)
signal1_noisy = signal1 + noise
signal2_noisy = signal2 + noise

# رسم سیگنال‌ها
plt.figure(figsize=(10, 6))

plt.subplot(2, 1, 1)
plt.plot(t, signal1_noisy, label="Signal 1 (Noisy)")
plt.plot(t, signal1, label="Signal 1 (Original)", linestyle='--')
plt.title("Signal 1 - Noisy vs Original")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(t, signal2_noisy, label="Signal 2 (Noisy)")
plt.plot(t, signal2, label="Signal 2 (Original)", linestyle='--')
plt.title("Signal 2 - Noisy vs Original")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()

plt.tight_layout()
plt.show()

"""# سیگنال‌های باندپایه و نمونه‌برداری آن‌ها

## مقدمه

یک **سیگنال باندپایه** به سیگنالی گفته می‌شود که تنها در یک بازه خاص از فرکانس‌ها وجود داشته باشد. به عبارت دیگر، سیگنال باندپایه فرکانس‌های بالای صفر را داراست، اما به طور متمرکز در یک باند خاص فرکانسی قرار می‌گیرد و خارج از این باند، فرکانس‌های زیادی ندارد.

### ویژگی‌های سیگنال باندپایه:
- سیگنال‌های باندپایه معمولاً در محدوده‌ای خاص از فرکانس‌ها (مثلاً فرکانس‌های بین $f_1$ و $f_2$) وجود دارند.
- این سیگنال‌ها برای انتقال اطلاعات در سیستم‌های مخابراتی و سیگنال‌های رادیویی استفاده می‌شوند.
- به طور معمول در سیگنال‌های صوتی یا ویدیویی نیز از سیگنال‌های باندپایه استفاده می‌شود.

## نمونه‌برداری از سیگنال‌های باندپایه

برای نمونه‌برداری یک سیگنال باندپایه، همانند سایر سیگنال‌ها باید از یک فرکانس نمونه‌برداری معین استفاده کرد. با این حال، در سیگنال‌های باندپایه توجه به ویژگی‌های زیر ضروری است:

### قاعده نایکوئیست (Nyquist Criterion)

طبق قاعده نایکوئیست، برای جلوگیری از **نقاط هم‌پوشانی** (Aliasing) هنگام نمونه‌برداری یک سیگنال باندپایه، باید فرکانس نمونه‌برداری حداقل دو برابر بالاترین فرکانس موجود در سیگنال باشد. به این ترتیب، اگر حداکثر فرکانس سیگنال باندپایه $f_{max}$ باشد، فرکانس نمونه‌برداری باید به صورت زیر انتخاب شود:

\[
f_s \geq 2 f_{max}
\]

که در آن:
- \( f_s \) فرکانس نمونه‌برداری است.
- \( f_{max} \) بالاترین فرکانس موجود در سیگنال باندپایه است.

اگر فرکانس نمونه‌برداری کمتر از حد نایکوئیست باشد، **پدیده علیاسینگ** (Aliasing) رخ می‌دهد که منجر به از دست رفتن اطلاعات و اشتباه در بازسازی سیگنال می‌شود.

### مثال از سیگنال باندپایه و نمونه‌برداری آن

سیگنال‌های باندپایه معمولاً در زمینه‌های مخابراتی مانند **سیگنال‌های رادیویی** یا **صوتی** استفاده می‌شوند. برای مثال، یک سیگنال صوتی با فرکانس‌های بین ۲۰ هرتز تا ۲۰ کیلوهرتز می‌تواند به عنوان یک سیگنال باندپایه در نظر گرفته شود. برای نمونه‌برداری این سیگنال، فرکانس نمونه‌برداری باید حداقل دو برابر بزرگتر از ۲۰ کیلوهرتز (که بالاترین فرکانس سیگنال است) باشد.

### نحوه نمونه‌برداری

برای نمونه‌برداری یک سیگنال باندپایه، سیگنال آنالوگ در زمان‌های گسسته به نمونه‌هایی با مقادیر دیجیتال تبدیل می‌شود. این کار معمولاً با استفاده از یک **مبدل آنالوگ به دیجیتال (ADC)** انجام می‌شود.

در عمل، با توجه به پیشرفت فناوری‌های پردازش سیگنال دیجیتال، نمونه‌برداری از سیگنال‌های باندپایه به صورت کاملاً دیجیتال انجام می‌شود.

### کد پایتون برای نمونه‌برداری سیگنال باندپایه

در این مثال، یک سیگنال باندپایه با فرکانس‌های مختلف ایجاد شده و سپس نمونه‌برداری از آن با فرکانس‌های مختلف انجام می‌شود.



"""

import numpy as np
import matplotlib.pyplot as plt

# پارامترهای سیگنال
f1 = 50  # فرکانس سیگنال (Hz)
f2 = 150  # بالاترین فرکانس سیگنال باندپایه (Hz)
t_continuous = np.linspace(0, 1, 10000)  # زمان پیوسته
signal_continuous = np.cos(2 * np.pi * f1 * t_continuous) + np.cos(2 * np.pi * f2 * t_continuous)

# فرکانس نمونه‌برداری
fs = 400  # فرکانس نمونه‌برداری (Hz)

# زمان گسسته و سیگنال نمونه‌برداری شده
t_discrete = np.arange(0, 1, 1/fs)
signal_discrete = np.cos(2 * np.pi * f1 * t_discrete) + np.cos(2 * np.pi * f2 * t_discrete)

# رسم سیگنال‌ها
plt.figure(figsize=(10, 6))

# سیگنال پیوسته
plt.subplot(2, 1, 1)
plt.plot(t_continuous, signal_continuous, label="Continuous Signal", color='b')
plt.title("Continuous Signal (Band-Pass)")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()

# سیگنال نمونه‌برداری شده
plt.subplot(2, 1, 2)
plt.stem(t_discrete, signal_discrete, label="Sampled Signal", basefmt=" ", linefmt="r-", markerfmt="ro")
plt.title("Sampled Signal (Band-Pass)")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()

plt.tight_layout()
plt.show()

"""# کاربردهای عملی نمونه‌برداری

## مقدمه

نمونه‌برداری فرآیند تبدیل سیگنال‌های آنالوگ به سیگنال‌های دیجیتال است. این فرآیند در بسیاری از زمینه‌ها و صنایع مختلف کاربرد دارد. نمونه‌برداری از اهمیت زیادی برخوردار است، زیرا به ما این امکان را می‌دهد که سیگنال‌های آنالوگ را به شکلی دیجیتال پردازش کنیم که برای ذخیره‌سازی، انتقال و تحلیل مناسب باشد.

در اینجا برخی از کاربردهای عملی نمونه‌برداری در دنیای واقعی آورده شده است.

## 1. پردازش صوتی

### ضبط صدا
در سیستم‌های ضبط صدا، سیگنال‌های آنالوگ صوتی (که از میکروفن‌ها دریافت می‌شود) باید نمونه‌برداری شده و به سیگنال دیجیتال تبدیل شوند تا امکان پردازش و ذخیره‌سازی آن‌ها در کامپیوتر یا دستگاه‌های دیجیتال فراهم شود. برای مثال:
- **CD ها** و **MP3 ها** با استفاده از نمونه‌برداری از سیگنال‌های صوتی آنالوگ در فرکانس‌های بالای ۴۴ کیلوهرتز تولید می‌شوند.
  
### پردازش و تغییر صدا
در زمینه پردازش صوتی، مانند **افکت‌های صوتی**، **کاهش نویز**، و **تشخیص صدا**، سیگنال‌های نمونه‌برداری شده به داده‌های دیجیتال تبدیل می‌شوند و سپس به صورت الگوریتمی پردازش می‌شوند.

## 2. پردازش تصویری

### فشرده‌سازی و ذخیره‌سازی تصاویر
تصاویر آنالوگ باید برای فشرده‌سازی و ذخیره‌سازی در قالب‌های دیجیتال مانند **JPEG** یا **PNG** نمونه‌برداری شوند. در این فرآیند، هر پیکسل تصویر به یک مقدار عددی تبدیل می‌شود.
- در سیستم‌های دوربین دیجیتال، سنسورهای تصویری با استفاده از نمونه‌برداری از نور منعطف، تصاویر دیجیتال تولید می‌کنند.

### پردازش و تحلیل تصویر
در کاربردهایی مانند **شناسایی چهره** یا **تشخیص اشیاء**، تصاویر نمونه‌برداری شده باید تحلیل شوند. این سیگنال‌ها به داده‌های دیجیتال تبدیل شده و سپس با استفاده از الگوریتم‌های پردازش تصویر تجزیه‌وتحلیل می‌شوند.

## 3. سیستم‌های مخابراتی

### انتقال داده‌های دیجیتال
در سیستم‌های مخابراتی، سیگنال‌های آنالوگ از طریق امواج رادیویی یا کابل‌ها منتقل می‌شوند. این سیگنال‌ها باید برای انتقال دیجیتالی نمونه‌برداری شده و سپس به صورت دیجیتال ارسال شوند.
- در **سیستم‌های تلفن همراه**، سیگنال‌های صوتی یا داده‌ها از طریق شبکه‌های موبایل به صورت دیجیتال منتقل می‌شوند.
  
### سیستم‌های رادیویی دیجیتال
در رادیوهای دیجیتال و سیستم‌های تلویزیونی دیجیتال، سیگنال‌های آنالوگ باید نمونه‌برداری شده و به فرمت دیجیتال برای انتقال از طریق امواج رادیویی تبدیل شوند.

## 4. سیستم‌های پزشکی

### تصویر برداری پزشکی
در فناوری‌هایی مانند **CT scan** و **MRI**، سیگنال‌های آنالوگ از بدن انسان توسط دستگاه‌های تصویربرداری جمع‌آوری می‌شوند و سپس نمونه‌برداری و دیجیتالی می‌شوند تا تصاویر پزشکی ساخته شوند.
  
### پایش و کنترل علائم حیاتی
دستگاه‌های پزشکی مانند **EKG** و **EEG** برای نظارت بر ضربان قلب یا فعالیت‌های مغزی از سیگنال‌های آنالوگ استفاده می‌کنند که باید نمونه‌برداری شده و سپس پردازش شوند تا تجزیه‌وتحلیل‌های پزشکی صورت گیرد.

## 5. اندازه‌گیری و سنجش

### اندازه‌گیری پارامترهای فیزیکی
در صنایع مختلف، از جمله **صنایع خودروسازی**، **کنترل کیفیت**، و **سنجش محیطی**، سنسورها داده‌های آنالوگ را جمع‌آوری کرده و این داده‌ها برای آنالیز و پردازش به سیگنال‌های دیجیتال نمونه‌برداری می‌شوند.
- برای مثال، در **سنسورهای دما**، داده‌های آنالوگ از دماسنج‌ها باید نمونه‌برداری و به دیجیتال تبدیل شوند تا به سیستم‌های کنترلی ارسال گردند.

## 6. سیستم‌های زمان واقعی

### کنترل و هدایت سیستم‌ها
در سیستم‌های کنترل زمان واقعی، مانند **روبات‌ها** یا **سیستم‌های اتوماسیون صنعتی**، سیگنال‌های آنالوگ از حسگرها نمونه‌برداری شده و سپس برای هدایت و کنترل سیستم به داده‌های دیجیتال تبدیل می‌شوند.
  
### پردازش داده‌های محیطی
در سیستم‌های نظارتی و حسگرهای محیطی (مانند **دستگاه‌های پایش آلودگی هوا**)، داده‌ها به صورت آنالوگ اندازه‌گیری می‌شوند و باید نمونه‌برداری و دیجیتالی شوند تا به راحتی پردازش شوند.

## 7. یادگیری ماشین و هوش مصنوعی

### یادگیری عمیق و تحلیل داده‌ها
در الگوریتم‌های یادگیری ماشین و مدل‌های **شبکه‌های عصبی عمیق (Deep Learning)**، داده‌های آنالوگ باید نمونه‌برداری شده و به فرمت دیجیتال تبدیل شوند تا مدل‌های AI بتوانند آن‌ها را تحلیل کنند. این فرآیند در کاربردهایی مانند **بینایی ماشین**، **پردازش زبان طبیعی**، و **تحلیل داده‌های بزرگ** استفاده می‌شود.

## نتیجه‌گیری

نمونه‌برداری در بسیاری از زمینه‌ها و صنایع مختلف از اهمیت ویژه‌ای برخوردار است. از پردازش صوتی و تصویری گرفته تا سیستم‌های مخابراتی و پزشکی، نمونه‌برداری به عنوان اولین گام در تبدیل سیگنال‌های آنالوگ به داده‌های دیجیتال برای تحلیل و پردازش‌های بیشتر نقش اساسی ایفا می‌کند.

"""

import numpy as np
import matplotlib.pyplot as plt

# پارامترهای سیگنال
fs_continuous = 1000  # فرکانس نمونه‌برداری پیوسته (Hz)
t_continuous = np.linspace(0, 1, fs_continuous)  # زمان پیوسته
f1 = 50  # فرکانس سیگنال اول (Hz)
f2 = 150  # فرکانس سیگنال دوم (Hz)

# سیگنال پیوسته
signal_continuous = np.cos(2 * np.pi * f1 * t_continuous) + np.cos(2 * np.pi * f2 * t_continuous)

# فرکانس نمونه‌برداری
fs_sampled = 400  # فرکانس نمونه‌برداری (Hz)
t_sampled = np.arange(0, 1, 1/fs_sampled)  # زمان نمونه‌برداری
signal_sampled = np.cos(2 * np.pi * f1 * t_sampled) + np.cos(2 * np.pi * f2 * t_sampled)

# رسم سیگنال‌ها
plt.figure(figsize=(10, 6))

# سیگنال پیوسته
plt.subplot(2, 1, 1)
plt.plot(t_continuous, signal_continuous, label="Continuous Signal", color='b')
plt.title("Continuous Signal (Band-Pass)")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()

# سیگنال نمونه‌برداری شده
plt.subplot(2, 1, 2)
plt.stem(t_sampled, signal_sampled, label="Sampled Signal", basefmt=" ", linefmt="r-", markerfmt="ro")
plt.title("Sampled Signal (Band-Pass)")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()

plt.tight_layout()

# کاربردهای علمی نمونه‌برداری (Scientific Applications of Sampling)



## 1. **نمونه‌برداری در پردازش سیگنال‌های علمی**


### مثال کد: نمونه‌برداری از سیگنال ضربان قلب مصنوعی (ECG)

import numpy as np
import matplotlib.pyplot as plt

# تعریف سیگنال ECG مصنوعی
def ecg_signal(t):
    return np.sin(2 * np.pi * 1 * t) + 0.5 * np.sin(2 * np.pi * 3 * t)

# پارامترهای نمونه‌برداری
fs = 50  # فرکانس نمونه‌برداری (Hz)
Ts = 1 / fs  # دوره نمونه‌برداری
t_continuous = np.linspace(0, 5, 1000)  # زمان پیوسته
t_samples = np.arange(0, 5, Ts)  # زمان نمونه‌ها
x_samples = ecg_signal(t_samples)  # نمونه‌های سیگنال

# رسم سیگنال و نمونه‌های آن
plt.figure(figsize=(10, 5))
plt.plot(t_continuous, ecg_signal(t_continuous), label='Continuous ECG Signal')
plt.stem(t_samples, x_samples, basefmt=" ", linefmt='r-', markerfmt='ro', label='Samples')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Sampling of a Synthetic ECG Signal')
plt.legend()
plt.grid(True)
plt.show()

"""2. نمونه‌برداری در علوم محیطی
در علوم محیطی از نمونه‌برداری برای اندازه‌گیری مقادیر مختلف مانند دما، رطوبت، و غلظت گازها استفاده می‌شود. این نمونه‌ها می‌توانند به صورت داده‌های گسسته برای تحلیل و مدل‌سازی علمی استفاده شوند.

مثال کد: نمونه‌برداری از تغییرات دمای محیط
"""

import numpy as np
import matplotlib.pyplot as plt

# تعریف سیگنال دما به صورت سینوسی با نویز
def temperature_signal(t):
    return 20 + 5 * np.sin(2 * np.pi * 0.1 * t) + np.random.normal(0, 0.5, len(t))

# پارامترهای نمونه‌برداری
fs = 10  # فرکانس نمونه‌برداری (Hz)
Ts = 1 / fs  # دوره نمونه‌برداری
t_continuous = np.linspace(0, 24, 1000)  # زمان پیوسته (24 ساعت)
t_samples = np.arange(0, 24, Ts)  # زمان نمونه‌ها
x_samples = temperature_signal(t_samples)  # نمونه‌های سیگنال

# رسم سیگنال و نمونه‌های آن
plt.figure(figsize=(10, 5))
plt.plot(t_continuous, temperature_signal(t_continuous), label='Continuous Temperature Signal')
plt.stem(t_samples, x_samples, basefmt=" ", linefmt='r-', markerfmt='ro', label='Samples')
plt.xlabel('Time (hours)')
plt.ylabel('Temperature (°C)')
plt.title('Sampling of Environmental Temperature Changes')
plt.legend()
plt.grid(True)
plt.show()

"""3. نمونه‌برداری در علوم زیستی و پزشکی
در علوم زیستی و پزشکی، نمونه‌برداری از داده‌های پیوسته مانند سیگنال‌های مغزی (EEG) و سیگنال‌های الکتریکی قلب (ECG) برای تحلیل بیماری‌ها استفاده می‌شود.

نتیجه‌گیری
نمونه‌برداری در بسیاری از حوزه‌های علمی به‌کار می‌رود و امکان تبدیل سیگنال‌های پیوسته به داده‌های دیجیتال برای تحلیل دقیق را فراهم می‌کند. در این مثال‌ها، نمونه‌برداری از سیگنال‌های محیطی و زیستی به کمک فرکانس مناسب نمونه‌برداری انجام شد
"""